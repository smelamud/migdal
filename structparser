#!/usr/bin/perl

# @(#) $Id$

use Getopt::Long;
Getopt::Long::Configure('no_auto_abbrev','no_ignore_case','bundling');

$VERSION='0.3';

$outputFileName='-';
@Structure=();

sub help
{
print <<EOF;
Usage: $0 [<options>] [<file>]

Migdal website kernel structure definition language preprocessor

  -h, --help                   Print this help and exit
  -o, --output=<name>          Output file
  -v, --version                Print version information and exit

Report bugs to <balu\@migdal.ru>
EOF
exit;
}

sub version
{
print <<EOF;
structparser (migdal $VERSION)
Copyright (C) 2005 by Dmitry E. Melamud.

This program is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public
License (see LICENSE).

EOF
exit;
}

sub processPathPattern
{
my ($item)=@_;

$$item{'_path_regex'}='^'.$$item{'path'}.'$';
$$item{'_path_regex'}=~s/\//\\\//g;
$$item{'_subs'}=();
while($$item{'_path_regex'}=~/{([^}]*)}/)
     {
     my $name=$1;
     my $type='';
     if($name=~/^(\w+):(\w+)$/)
       {
       ($name,$type)=($1,$2);
       SWITCH: {
               $$item{'_path_regex'}=~s/{([^}]*)}/(.+)/,last if $type eq 'path';
               $$item{'_path_regex'}=~s/{([^}]*)}/([^\\\/]+)/;
	       }
       }
     else
       {
       $$item{'_path_regex'}=~s/{([^}]*)}/([^\\\/]+)/;
       }
     push @{$$item{'_subs'}},$name;
     }
}

sub processConds
{
my ($item)=@_;

for my $var(keys %$item)
   {
   if($var=~/^cond:(\w+)$/)
     {
     my ($table,$value)=($1,$$item{$var});
     $value="\".idByIdent(\"$value\").\"" unless $value=~/\|/;
     $value="\".idOrCatalog(\"$1\",\"$2\").\"" if $value=~/^(.*)\|(.*)$/;
     $$item{'_cond'}='' unless exists($$item{'_cond'});
     $table=uc $table;
     $$item{'_cond'}.=" && entryExists(ENT_$table,\"$value\")";
     }
   elsif($var eq 'domain')
     {
     $$item{'_cond'}='' unless exists($$item{'_cond'});
     my $value=$$item{$var};
     $$item{'_cond'}.=" && \$userDomain=='$value'";
     }
   }
}

sub saveArgs
{
my ($item)=@_;

for my $var(keys %$item)
   {
   if($var=~/^((?:arg|id)\.\w+)/)
     {
     $$item{"_$1"}=$$item{$var};
     }
   }
}

sub processIdOrCatalog
{
my ($item)=@_;

for my $var(keys %$item)
   {
   next unless $var=~/^_(?:arg|id)\./;
   next unless $$item{$var}=~/^(.*)\|(.*)$/;
   $$item{$var}="\".idOrCatalog(\"$1\",\"$2\").\"";
   }
}

sub postProcessArgs
{
my ($item)=@_;

for my $var(keys %$item)
   {
   next unless $var=~/^(?:arg|id)\./;
   my $type;
   ($var,$type)=$var=~/^((?:arg|id)\.\w+):(\w+)$/;
   if($type eq 'grp')
     {
     my $name=uc $$item{"_$var"};
     my $value;
     $value="constant(\"GRP_$name\")" if $name=~/\$/;
     $value="GRP_$name" unless $name=~/\$/;
     $$item{"_$var"}="\".$value.\"";
     }
   else
     {
     $type=ucfirst $type;
     $$item{"_$var"}="\".postProcess$type(\"".$$item{"_$var"}."\").\"";
     }
   }
}

sub addOrigId
{
my ($item,$name)=@_;

$$item{'_orig.ids'}=[] if !exists($$item{'_orig.ids'});
push @{$$item{'_orig.ids'}},$name;
}

sub processArgs
{
my ($item)=@_;

saveArgs($item);
processIdOrCatalog($item);

my $n=1;
for my $sub(@{$$item{'_subs'}})
   {
   for my $var(keys %$item)
      {
      next unless $var=~/^(?:arg|id)\./ || $var eq 'parent.path'
                  || $var eq '_cond' || $var eq 'orig.path'
		  || $var eq 'redirect.path'
		  || $var=~/^link\.(?:id|name|icon)$/;
      $var="_$1" if $var=~/^((?:arg|id)\.\w+):\w+$/;
      $$item{$var}=~s/\${$sub}/"{\$m[$n]}"/ge;
      }
   $n++;
   }

for my $var(keys %$item)
   {
   next unless $var=~/^(?:arg|id)\./ || $var=~/^link\.(?:id|name|icon)$/;
   $var="_$1" if $var=~/^((?:arg|id)\.\w+):\w+$/;
   $$item{$var}=~s/\${((?:(?:parent|orig)\.id|arg|id)\.\w+)}/subTitleVar($1,$item)/ge;
   }

postProcessArgs($item);
}

sub subTitleVar
{
my ($expr,$item)=@_;

return "{\$args['$1']}" if $expr=~/^arg\.(\w+)$/;
return "{\$ids['$1']}" if $expr=~/^id\.(\w+)$/;
if($expr=~/^orig.id\.(\w+)$/)
  {
  addOrigId($item,$1);
  return "\".\$info->orig->getId('$1').\"";
  }
return "\".\$info->parent->getId('$1').\"" if $expr=~/^parent.id\.(\w+)$/;
return "\".\$info->parent->getTitle().\"" if $expr eq 'parent.title';
return "\".\$info->parent->getLinkTitle().\"" if $expr eq 'parent.link.title';
return "{\$$expr}";
}

sub subTitleFunc
{
my ($expr,$prefix,$item)=@_;

my ($name,$arg)=$expr=~/^(\w+)\(([^)]*)\)$/;
$name=ucfirst $name;
$arg=subTitleVar($arg,$item);
return "\".$prefix$name(\"$arg\").\"";
}

sub subTitleExpr
{
my ($expr,$prefix,$item)=@_;

if($expr=~/\(/)
  {
  return subTitleFunc($expr,$prefix,$item);
  }
else
  {
  return subTitleVar($expr,$item);
  }
}

sub processTitle
{
my ($item,$name,$prefix)=@_;

return unless exists($$item{$name});
my $title=$$item{$name};
$title=~s/\${([^}]*)}/subTitleExpr($1,$prefix,$item)/ge;
$$item{"_$name"}=$title;
}

sub processTitleLike
{
my ($item)=@_;

processTitle($item,'title','title');
processTitle($item,'reltitle','title');
processTitle($item,'link.title','title');
processTitle($item,'script','script');
}

sub addItem
{
my ($item)=@_;

return unless exists($$item{'path'});
$path=$$item{'path'};
$path.='/' if substr($path,$#path) ne '/';
$$item{'path'}=$path;
processPathPattern($item) if $path=~/{/;
processConds($item);
processArgs($item);
processTitleLike($item);
push @Structure,$item;
}

sub readStructure
{
my $item={};
while(<>)
     {
     s/#.*$//;
     unless(/^\s*([\w.:]+)\s*=(.*)$/)
           {
	   addItem($item);
	   $item={};
	   }
     else
           {
	   my ($name,$value)=($1,$2);
	   $value=~s/^\s*//;
	   $value=~s/\s*$//;
           $$item{$name}=$value;
	   }
     }
addItem($item);
}

sub init
{
$|=1;
GetOptions('help|h|?'	      => \&help,
	   'output|o=s'       => \$outputFileName,
           'version|v'	      => \&version);
open OUT,">$outputFileName";
readStructure;
}

sub trimQuotes
{
my ($s)=@_;

$s=~s/""\.//g;
$s=~s/\.""//g;
$s=~s/\.""\././g;
return $s;
}

sub run
{
print OUT <<EOF;
<?php
function &getLocationInfo(\$path,\$redirid=0)
{
global \$userDomain;

\$info=new LocationInfo();
\$info->setPath(\$path);
if(substr(\$path,-5)=='.html')
  \$path=substr(\$path,0,-5);
\$path=normalizePath(\$path,true,SLASH_YES,SLASH_YES);
EOF
for my $item(@Structure)
   {
   my $cond=trimQuotes($$item{'_cond'});
   if(!exists($$item{'_path_regex'}))
     {
     my $path=$$item{'path'};
     print OUT <<EOF;
if(\$path=='$path'$cond)
  {
EOF
     }
   else
     {
     my $regex=$$item{'_path_regex'};
     print OUT <<EOF;
if(preg_match('/$regex/',\$path,\$m)$cond)
  {
EOF
     }
   if(exists($$item{'redirect.path'}))
     {
     my $redirect=$$item{'redirect.path'};
     print OUT <<EOF
  \$info->setPath('$redirect');
EOF
     }
   if(exists($$item{'parent.path'}))
     {
     my $parent=trimQuotes('"'.$$item{'parent.path'}.'"');
     print OUT <<EOF
  \$info->setParent(getParentLocationInfo($parent,\$redirid));
EOF
     }
   if(exists($$item{'orig.path'}))
     {
     my $orig=trimQuotes('"'.$$item{'orig.path'}.'"');
     print OUT <<EOF
  \$info->setOrig(getParentLocationInfo($orig,0));
EOF
     }
   if(exists($$item{'_orig.ids'}))
     {
     my $pids="array(".join(',',map("'$_'",@{$$item{'_orig.ids'}})).")";
     print OUT <<EOF
  if(\$info->origHasIds($pids))
  {
EOF
     }
   my $f=0;
   for my $key(keys %$item)
       {
       next unless $key=~/^_id\.([\w:]*)$/;
       if(!$f)
         {
	 print OUT <<EOF;
  \$ids=array(
EOF
	 $f=1;
	 }
       my $value=trimQuotes('"'.$$item{$key}.'"');
       print OUT <<EOF
  '$1' => $value,
EOF
       }
   if($f)
     {
     print OUT <<EOF
  );
  \$info->setIds(\$ids);
EOF
     }
   $f=0;
   for my $key(keys %$item)
       {
       next unless $key=~/^_arg\.([\w:]*)$/;
       if(!$f)
         {
	 print OUT <<EOF;
  \$args=array(
EOF
	 $f=1;
	 }
       my $value=trimQuotes('"'.$$item{$key}.'"');
       print OUT <<EOF
  '$1' => $value,
EOF
       }
   if($f)
     {
     print OUT <<EOF
  );
  \$info->setArgs(\$args);
EOF
     }
   if(exists($$item{'_script'}))
     {
     my $script=trimQuotes('"'.$$item{'_script'}.'"');
     print OUT <<EOF;
  \$info->setScript($script);
EOF
     }
   if(exists($$item{'_title'}))
     {
     my $title=trimQuotes('"'.$$item{'_title'}.'"');
     print OUT <<EOF
  \$info->setTitle($title);
EOF
     }
   if(exists($$item{'_reltitle'}))
     {
     my $reltitle=trimQuotes('"'.$$item{'_reltitle'}.'"');
     print OUT <<EOF
  \$info->setRelativeTitle($reltitle);
EOF
     }
   elsif(exists($$item{'_title'}))
     {
     my $title=trimQuotes('"'.$$item{'_title'}.'"');
     print OUT <<EOF
  \$info->setRelativeTitle($title);
EOF
     }
   if(exists($$item{'link.name'}))
     {
     my $linkName=trimQuotes('"'.$$item{'link.name'}.'"');
     print OUT <<EOF
  \$info->setLinkName($linkName);
EOF
     }
   if(exists($$item{'link.id'}))
     {
     my $linkId=trimQuotes('idByIdent("'.$$item{'link.id'}.'")');
     print OUT <<EOF
  \$info->setLinkId($linkId);
EOF
     }
   if(exists($$item{'link.icon'}))
     {
     my $linkIcon=trimQuotes('"'.$$item{'link.icon'}.'"');
     print OUT <<EOF
  \$info->setLinkIcon($linkIcon);
EOF
     }
   if(exists($$item{'_link.title'}))
     {
     my $linkTitle=trimQuotes('"'.$$item{'_link.title'}.'"');
     print OUT <<EOF
  \$info->setLinkTitle($linkTitle);
EOF
     }
   print OUT <<EOF;
  return \$info;
EOF
   if(exists($$item{'_orig.ids'}))
     {
     print OUT <<EOF
  }
EOF
     }
   print OUT <<EOF;
  }
EOF
   }
print OUT <<EOF;
return \$info;
}
?>
EOF
}

sub done
{
}

init;
run;
done;
