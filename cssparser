#!/usr/bin/perl

# @(#) $Id$

use Getopt::Long;
Getopt::Long::Configure('no_auto_abbrev','no_ignore_case','bundling');

$VERSION='0.3';

$Style='default';
$css=1;

%Vars=();

package Input;

sub new
{
my ($class)=@_;
return bless {'current' => '','files' => []},$class;
}

sub insert
{
my ($self,$name)=@_;

open my $in,$name or ::error("Cannot open include file '$name'");
unshift @{$self->{'files'}},$in;
}

sub eof
{
my ($self)=@_;

return $#{$self->{'files'}}<0;
}

sub get
{
my ($self)=@_;

return $self->{'current'};
}

sub next
{
my ($self)=@_;

while(!$self->eof())
     {
     my $in=${$self->{'files'}}[0];
     if(!eof($in))
       {
       $self->{'current'}=<$in>;
       return;
       }
     close $in;
     shift @{$self->{'files'}};
     }
$self->{'current'}='';
}

package main;

sub display
{
print STDERR @_;
}

sub error
{
my ($msg)=@_;

display "cssparser: $msg\n";
exit(1);
}

sub help
{
print <<EOF;
Usage: $0 [<options>] [<file>]

Migdal website kernel MCSS macro language preprocessor

  -c, --css                 Create CSS stylesheet
  -h, --help                Print this help and exit
  -M, --macros=<filename>   Set macro file path
  -s, --style=<name>        Compile the style <name>
  -p, --php                 Create PHP include
  -v, --version             Print version information and exit

Report bugs to <balu\@migdal.ru>
EOF
exit;
}

sub version
{
print <<EOF;
cssparser (migdal $VERSION)
Copyright (C) 2001-02 by Dmitry E. Melamud.

This program is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public
License (see LICENSE).

EOF
exit;
}

sub macros
{
my (undef,$macros)=@_;

unshift @ARGV,$macros if -r $macros;
}

sub setCSS
{
$css=1;
}

sub setPHP
{
$css=0;
}

sub assignVar
{
my ($name,$value)=@_;

if($value ne '')
  {
  $Vars{$name}=$value;
  unless($css)
	{
	my $q="'" unless $Vars{$name} eq 'false' || $Vars{$name} eq 'true';
	print "\$style_$name=$q".$Vars{$name}."$q;\n";
	}
  }
else
  {
  delete $Vars{$name};
  }
}

sub getVar
{
my ($name,$err)=@_;

if($Vars{$name} ne '')
  {
  return $Vars{$name};
  }
else
  {
  $$err=1;
  return '';
  }
}

sub subVars
{
my ($s)=@_;
my $err=0;

$s=~s/%(\w+)/getVar($1,\$err)/ge;
return $err ? '' : $s;
}

sub init
{
$|=1;
GetOptions('css|c'      => \&setCSS,
           'help|h|?'	=> \&help,
           'macros|M=s'	=> \&macros,
	   'php|p'      => \&setPHP,
           'style|s=s'	=> \$Style,
           'version|v'	=> \&version);
$Input=Input->new();
$Input->insert(shift @ARGV);
}

sub run
{
print "<?php\n" unless $css;
assignVar($Style,1);
$Input->next();
while(!$Input->eof())
     {
     my $c=$Input->get();
     chomp $c;
     $c=~s/\s*!.*$//;
     next if $c=~/^\s*$/;
     if(my ($name)=$c=~/^\s*include\s+(\S+|"[^"]*"|'[^']*')\s*$/)
       {
       $name=~s/(^["'])|(['"]$)//g;
       $Input->insert($name);
       next;
       }
     if($c=~/^\s*:\s*(~?)\s*(\w+)/)
       {
       my $err=0;
       $v=getVar(lc($2),\$err);
       next if $1 eq '' and getVar(lc($2),\$err) eq '' or
               $1 eq '~' and getVar(lc($2),\$err) ne '';
       $c=~s/^\s*:\s*~?\s*\w+//;
       }
     if($c=~/^\s*(\w+)\s*=\s*(.*)$/)
       {
       my $s=subVars($2);
       assignVar($1,$s);
       }
     else
       {
       $s=subVars($c);
       print "$s\n" if $css && $s ne '';
       }
     }
continue
     {
     $Input->next();
     }
print "?>\n" unless $css;
}

sub done
{
}

init;
run;
done;
