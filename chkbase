#!/usr/bin/perl

%Revisions=();
$cvspath='';
%Noticed=();

sub init
{
open IN,'cvs status 2>/dev/null|';
while(<IN>)
     {
     if(my ($rev,$name)=m/Repository revision:\s+(\S+)\s+(\S+),v/)
       {
       $Revisions{$name}=$rev;
       if($name=~/^(.*)LICENSE$/)
         {
         $cvspath=$1;
	 }
       }
     }
close IN;
}

sub revLess
{
my ($r1,$r2)=@_;

@r1=split /\./,$r1;
@r2=split /\./,$r2;
for($i=0;$i<=$#r1 && $i<=$#r2;$i++)
   {
   return 1 if $r1[$i]<$r2[$i];
   return 0 if $r1[$i]>$r2[$i];
   }
return 0;
}

sub checkRev
{
my ($name,$peer,$rev)=@_;

my $nrev=$Revisions{$cvspath.$peer};
if(revLess($rev,$nrev))
  {
  if(!$Noticed{$name})
    {
    print "$name is outdated:\n";
    $Noticed{$name}=1;
    }
  print "  $peer is $nrev now ($rev used)\n";
  }
}

sub run
{
for(keys %Revisions)
   {
   my ($name)=m/^$cvspath(.*)$/o;
   open IN,$name;
   while(<IN>)
        {
	checkRev($name,$1,$2) if /^[<>\s]*Based-on:\s+(\S+)\s+(\S+)/;
	}
   close IN;
   }
}

sub done
{
}

init();
run();
done();
