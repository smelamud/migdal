#!/usr/bin/perl

# @(#) $Id$

$Line='';
$LineN=1;
$Eof=0;
$Token='';

%Quotes=('<!--' => 'Comment',
         '<?'   => 'PHP',
	 '<<'   => 'Remark',
         '<'    => 'Tag',
	 ''     => 'Text');
	 
@Requests=();
$Header='';
$Body='';
$Footer='';

$LastIter='';
$LastItem='';

$Stack='';

%Macros=();

#### Utility functions ####

sub subVars
{
my ($s,$st,$ed)=@_;

my $item=$::Stack->top()->getItem();
$s=~s/\$_/${st}urlencode(\$REQUEST_URI)$ed/g;
$s=~s/\$(\w+)\.(\w+)/$st\$\1->get\2()$ed/g;
$s=~s/\$\.(\w+)/$st\$$item->get\1()$ed/g;
$s=~s/\$%(\w+)\.(\w+)/${st}urlencode(\$\1->get\2())$ed/g;
$s=~s/\$%\.(\w+)/${st}urlencode(\$$item->get\1())$ed/g;
return $s;
}

sub subVarsText
{
my ($s)=@_;

return subVars($s,'<?php echo ',' ?>');
}

sub subMacroParams
{
my ($s,$params)=@_;

$s=~s/%(\w+)/$params->{$1}/ge;
return $s;
}

#### StackFrame ####

package StackFrame;

sub new
{
my ($class,$frame)=@_;

my $data={'iterator' => '',
          'item'     => ''};
if(defined($frame))
  {
  $data->{$name}=$value while(my($name,$value)=each(%{$frame}));
  }
return bless $data,$class;
}

sub getIterator
{
my ($self)=@_;

return $self->{'iterator'};
}

sub setIterator
{
my ($self,$value)=@_;

return $self->{'iterator'}=$value;
}

sub getItem
{
my ($self)=@_;

return $self->{'item'};
}

sub setItem
{
my ($self,$value)=@_;

return $self->{'item'}=$value;
}

#### Stack ####

package Stack;

sub new
{
my ($class)=@_;

$self=bless {'stack' => []},$class;
$self->push();
return $self;
}

sub top
{
my ($self)=@_;

return ${$self->{'stack'}}[$#{$self->{'stack'}}];
}

sub pop
{
my ($self)=@_;

return pop @{$self->{'stack'}};
}

sub push
{
my ($self)=@_;

return push @{$self->{'stack'}},StackFrame->new($self->top());
}

#### Token ####

package Token;

sub new
{
my ($class,$n)=@_;

return bless {'token' => ::drop($n)},$class;
}

sub getToken
{
my ($self)=@_;

return $self->{'token'};
}

sub process
{
my ($self)=@_;

::body($self->getToken());
}

#### Text ####

package Text;

@ISA=qw(Token);

sub new
{
my ($class)=@_;

my $i=index $::Line,'<';
$i=$i<0 ? length($::Line) : $i;
return Token::new($class,$i);
}

sub process
{
my ($self)=@_;

::body(::subVarsText($self->getToken()));
}

#### QuotedToken ####

package QuotedToken;

@ISA=qw(Token);

sub new
{
my ($class,$quote)=@_;

my $i;
::more() while(($i=index($::Line,$quote))<0 && !$::Eof);
$::Line.=$quote if $i<0;
$i=index($::Line,$quote)+length($quote);
return Token::new($class,$i);
}

#### Tag ####

package Tag;

@ISA=qw(Token);

sub new
{
my ($class)=@_;

::more() while($::Line !~ /^<(([^>'"]*)|('[^']*')|("[^"]*"))*>/ && !$::Eof);
my ($token)=$::Line =~ /^(<(([^>'"]*)|('[^']*')|("[^"]*"))*>)/;
my $self=Token::new($class,length($token));
$token=substr $token,1,-1;
($self->{'name'},$token)=$token=~/^\s*(\/?\w+)(.*)$/;
$self->{'name'}=lc $self->{'name'};
$self->{'args'}={};
while($token!~/^\s*$/)
     {
     my $name,$value;
     ($name,undef,$value,undef,undef,undef,$token)=
         $token=~/^\s*(\w+)\s*(=\s*((\S*)|('[^']*')|("[^"]*")))?(.*)$/;
     $value=substr $value,1,-1 if $value=~/^['"]/;
     $self->{'args'}{lc $name}=$value;
     }
return $self;
}

sub getName
{
my ($self)=@_;

return $self->{'name'};
}

sub getArgs
{
my ($self)=@_;

return $self->{'args'};
}

sub process
{
my ($self)=@_;

my $name=$self->getName();
$name=~tr/\//_/;
$name='el'.ucfirst($name);
if($self->can($name))
  {
  &$name($self);
  }
elsif(defined($::Macros{$self->getName()}))
  {
  $::Line=::subMacroParams($::Macros{$self->getName()},$self->getArgs())
          .$::Line;
  }
else
  {
  ::body(::subVarsText($self->getToken()));
  }
}

sub elHtml
{
my ($self)=@_;

::request('lib/errorreporting.php');
::request('lib/database.php');
::request('lib/session.php');
::header(<<EOT);
<?php
dbOpen();
session();
?>
EOT
::body($self->getToken());
}

sub el_html
{
my ($self)=@_;

::footer(<<EOT);
<?php
dbClose();
?>
EOT
::body($self->getToken());
}

sub elRequire
{
my ($self)=@_;

::request($self->getArgs()->{'name'});
}

sub elIterate #XXX Possibly empty class
{
my ($self)=@_;

my $name=$self->getArgs()->{'name'};
$name='iter'.($::LastIter++) if $name eq '';
$::Stack->top()->setIterator($name);
::body("<?php \$$name=new ",$self->getArgs()->{'class'},"() ?>");
}

sub elFor #XXX Possibly empty list
{
my ($self)=@_;

my $list=$self->getArgs()->{'list'};
$list=$::Stack->top()->getIterator() if $list eq '';
my $name=$self->getArgs()->{'name'};
$name='item'.($::LastItem++) if $name eq '';
::body("<?php while(\$$name=\$$list->next()) { ?>");
$::Stack->push();
$::Stack->top()->setItem($name);
}

sub el_for
{
my ($self)=@_;

$::Stack->pop();
::body("<?php } ?>");
}

sub elMacro #XXX Possibly empty name
{
my ($self)=@_;

my $body='';
::pullToken();
while((ref($::Token) ne 'Tag' || $::Token->getName() ne '/macro')
      && $::Line ne '')
     {
     $body.=$::Token->getToken();
     ::pullToken();
     }
$::Macros{$self->getArgs()->{'name'}}=$body;
}

#### Comment ####

package Comment;

@ISA=qw(QuotedToken);

sub new
{
my ($class)=@_;

return QuotedToken::new($class,'-->');
}

#### Remark ####

package Remark;

@ISA=qw(QuotedToken);

sub new
{
my ($class)=@_;

return QuotedToken::new($class,'>>');
}

sub process
{
}

#### PHP ####

package PHP;

@ISA=qw(QuotedToken);

sub new
{
my ($class)=@_;

return QuotedToken::new($class,'?>');
}

#### main ####

package main;

sub more
{
return if $Eof;
my $s=<>;
if(defined($s))
  {
  $Line.=$s;
  }
else
  {
  $Eof=1;
  }
}

sub pull
{
more() while(!$Eof && $Line eq '');
}

sub drop
{
my $n=shift;

my $s=substr($Line,0,$n);
$LineN+=$s=~/\n/;
substr($Line,0,$n)='';
pull;
return $s;
}

sub pullToken
{
my $quote='';
my $class='';
while(my($q,$c)=each(%Quotes))
     {
     if(substr($Line,0,length($q)) eq $q && length($q)>=length($quote))
       {
       $quote=$q;
       $class=$c;
       }
     }
my $name=$class.'::new';
return $Token=&$name($class);
}

sub request
{
my ($name)=@_;

push @Requests,$name;
}

sub printVar
{
$var=shift;
$data=join '',@_;
if($$var=~/\n$/)
  {
  $data=~s/^\s+//;
  }
else
  {
  $data=~s/^\s*\n/\n/;
  }
$$var.=$data;
}

sub header
{
printVar(\$Header,@_);
}

sub body
{
printVar(\$Body,@_);
}

sub footer
{
printVar(\$Footer,@_);
}

sub display
{
print STDERR @_;
}

sub init
{
$|=1;
$Stack=Stack->new();
unshift @ARGV,'macros.mhtml' if -r 'macros.mhtml';
pull;
}

sub run
{
while($Line ne '')
     {
     pullToken;
     $Token->process();
     }
}

sub done
{
print "<?php\n";
foreach(@Requests)
       {
       print "require_once('$_');\n";
       }
print "?>\n";
print $Header,$Body,$Footer;
}

init;
run;
done;
