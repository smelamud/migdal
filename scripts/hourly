#!/usr/bin/perl

# @(#) $Id$

use DBI;
use Getopt::Long;
Getopt::Long::Configure('no_auto_abbrev','no_ignore_case','bundling');

$VERSION='0.2';
$configPath='conf/migdal.conf';
@libpath=();
GetOptions('config|c=s'	 => \$configPath,
           'help|h|?'	 => \&help,
	   'libpath|L=s' => \@libpath,
           'version|v'	 => \&version);
push @INC,@libpath;

require 'config.pl';
require 'opscript.pl';

sub help
{
print <<EOF;
Usage: $0 [<options>]

Migdal batch operations script

  -c, --config=<path>       Set configuration file path
                            (default is `conf/migdal.conf')
  -L, --libpath=<path>      Look for libraries in <path>
                            (you can use this option many times)
  -h, --help                Print this help and exit
  -v, --version             Print version information and exit

Report bugs to <balu\@yes.ru>
EOF
exit;
}

sub version
{
print <<EOF;
hourly (migdal $VERSION)
Copyright (C) 2001 by Dmitry E. Melamud.

This program is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public
License (see COPYING).

EOF
exit;
}

sub init
{
readConfig();
$dbh=DBI->connect('DBI:mysql:database='.$Config{'dbName'}.';host='.
                  $Config{'dbHost'},$Config{'dbUser'},$Config{'dbPassword'},
		  {'AutoCommit' => 1,'PrintError' => 1,
		   'ShowErrorStatement' => 1});
}

sub clearSessions
{
my $lasts=$dbh->selectall_arrayref(
          'select users.id,from_unixtime(unix_timestamp(max(last)))
           from sessions
	        left join users
	             on sessions.user_id=users.id
	   where last+interval '.$Config{'sessionTimeout'}.' hour<now()
	   group by users.id');
foreach my $info(@{$lasts})
       {
       $dbh->do('update users
                 set last_online=\''.$info->[1].'\'
		 where id='.$info->[0]);
       }
$dbh->do('delete
          from sessions
	  where last+interval '.$Config{'sessionTimeout'}.' hour<now()');
}

sub clearUsers
{
$dbh->do('delete
          from users
	  where confirm_deadline is not null and confirm_deadline<now()');
}

sub clearTmpTexts
{
$dbh->do('delete
          from tmp_texts
	  where last_access+interval '.$Config{'tmpTextTimeout'}.' hour<now()');
}

sub clearRedirs
{
$dbh->do('delete
          from redirs
	  where last_access+interval '.$Config{'redirTimeout'}.' hour<now()');
}

sub useImagesFrom
{
my ($select)=@_;

my $used=$dbh->selectall_arrayref($select);
foreach my $info(@{$used})
       {
       $dbh->do('update images
                 set used=0
		 where image_set='.$info->[0]);
       }
}

sub clearImages
{
$dbh->do('update images
          set used=1');
useImagesFrom('select image_set
               from stotexts
	       where image_set<>0');
useImagesFrom('select large_imageset
               from stotexts
	       where large_imageset<>0');
$dbh->do('delete
          from images
          where used=1');
}

sub closeComplains
{
my $sth=$dbh->prepare(
	'select complains.id as complain_id,message_id,link,text,script,
		users.id as shames_id
	 from complains
	      left join messages
		   on complains.message_id=messages.id
	      left join users
		   on messages.sender_id=users.id
	      left join complain_types
		   on complain_types.id=complains.type_id
	      left join complain_actions
		   on complains.type_id=complain_actions.type_id
	      left join complain_scripts
		   on complain_scripts.type_ident=complain_types.ident
	 where closed is null and users.shames<>0
	       and complain_types.deadline<>0
	       and messages.sent+interval complain_types.deadline hour<now()
	       and complain_actions.automatic<>0');
$sth->execute;
while(my $complain=$sth->fetchrow_hashref)
     {
     my $id;
     $dbh->do("insert into stotexts(body) values('".$complain->{'text'}."')");
     $id=$dbh->{'mysql_insertid'};
     $dbh->do("insert into messages(stotext_id,sender_id,sent) values($id,".
               $complain->{'shames_id'}.',now())');
     $id=$dbh->{'mysql_insertid'};
     $dbh->do("insert into forums(message_id,up) values($id,".
               $complain->{'message_id'}.')');
     opScript($dbh,$complain->{'script'},$complain);
     }
}

sub run
{
clearSessions();
clearUsers();
clearTmpTexts();
clearImages();
closeComplains();
}

sub done
{
$dbh->disconnect();
}

init();
run();
done();
