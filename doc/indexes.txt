Поля общего назначения
======================

В таблицах topics, postings и messages есть набор полей, не имеющих
определенного назначения. В них при необходимости можно хранить все, что
угодно, не создавая для каждого конкретного случая новых полей. База данных
остается при этом универсальной, ее не приходится приспосабливать под каждый
новый интерфейс.

Ниже приведен список таких полей с указанием существующих применений и
вспомогательных функций.

Таблица topics
--------------

index0 (INT)
  Используется для упорядочения тем.
   actions/topicsreorder.php устанавливает это поле.
   PostingListIterator умеет сортировать по возрастанию этого поля.
   TopicListIterator умеет сортировать по этому полю в обоих направлениях.

index1 (INT)
  Резерв.
   TopicListIterator умеет сортировать по этому полю в обоих направлениях.

index2 (INT)
  Резерв.

index3 (INT)
  Резерв.

index4 (INT)
  Резерв.

Таблица postings
----------------

index0 (INT)
  Используется для упорядочения сообщений.
   actions/reorder.php устанавливает это поле.
   Есть Posting::getIndex0().
   PostingListIterator возвращает это поле.
   PostingListIterator умеет сортировать по возрастанию этого поля.
   getPostingById() и getFullPostingById() возвращают это поле.
   getSibling() выбирает идентификатор соседнего постинга.
   getSiblingIndex0() выбирает index0 соседнего постинга.

index1 (INT)
  Используется в качестве номера выпуска журнала или газеты.
   actions/postingmod.php умеет модифицировать это поле.
   Есть Posting::getIndex1().
   Класс Posting воспринимает это поле как общедоступное, устанавливаемое в
    соответствии с запросом пользователя.
   PostingListIterator умеет выбирать постинги по этому полю.
   PostingListIterator возвращает это поле.
   PostingListIterator умеет сортировать по этому полю в обоих направлениях.
   ArticleCoversIterator служит для выбора обложек журналов.
   getPostingById() и getFullPostingById() возвращают это поле.
   getPostingById() и getFullPostingById() умеют выбирать по этому полю.
   getRandomPostingId() умеет выбирать по этому полю.
   getSiblingIssue() выбирает идентификатор соседнего выпуска журнала.
   getSiblingIndex1() выбирает index1 соседнего выпуска журнала.

index2 (INT)
  Используется для обозначения "спаренных" выпусков журналов или газет.
   actions/postingmod.php умеет модифицировать это поле.
   Есть Posting::getIndex2().
   Класс Posting воспринимает это поле как общедоступное, устанавливаемое в
    соответствии с запросом пользователя.
   PostingListIterator возвращает это поле.
   getPostingById() и getFullPostingById() возвращают это поле.
   ArticleCoversIterator возвращает это поле.

index3 (INT)
  Резерв.

index4 (INT)
  Резерв.

Таблица messages
----------------

comment0 (VARCHAR(250))
  Используется в качестве названия рубрики, если создавать тему для каждой
  рубрики неэффективно.
   actions/postingmod.php умеет модифицировать это поле.
   Есть Message::getComment0() и Message::getHTMLComment0().
   Класс Message воспринимает это поле как общедоступное, устанавливаемое в
    соответствии с запросом пользователя и кодируемое при отправке в журнал.
   PostingListIterator возвращает это поле.
   getPostingById() и getFullPostingById() возвращают это поле.

comment1 (VARCHAR(250))
  Резерв.
   actions/postingmod.php умеет модифицировать это поле.
   Есть Message::getComment1() и Message::getHTMLComment1().
   Класс Message воспринимает это поле как общедоступное, устанавливаемое в
    соответствии с запросом пользователя и кодируемое при отправке в журнал.
   PostingListIterator возвращает это поле.
   getPostingById() и getFullPostingById() возвращают это поле.

@(#) $Id$
