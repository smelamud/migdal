Хранилище изображений
=====================

Данное хранилище является универсальным и может использоваться не только в
проектах, основанных на ядре Migdal.

Основное хранилище
------------------

Основное хранилище находится в файловой системе. Каждая картинка в хранилище
хранится в файле с именем

$IMAGES/xx/xxyy...y

где

$IMAGES  - базовый каталог хранилища
xxyy...y - SHA1-хэш картинки
xx       - первые два символа SHA1-хэша

Таблица картинок
----------------

Таблица картинок находится в базе данных и имеет следующие поля:

id int not null primary key auto_increment
    Идентификатор

ident varchar(75) null unique
    User-friendly имя картинки
    Если картинка является уменьшенной копией другой, здесь должен быть null

hash varchar(40) null
    Хэш картинки или null, если картинка в файловой системе отсутствует

width int not null
height int not null
    Размеры картинки в пикселах

mime_type varchar(30) not null
    MIME-тип картинки

size int null
    Объем картинки в байтах или null, если картинка в файловой системе
    отсутствует

accessed datetime
    Дата/время последнего доступа к картинке

large_id int null foreign key
    Если картинка является уменьшенной копией другой, здесь указывается id
    оригинала
    Если нет, то ставится null

bound_width int null
bound_height int null
    Если картинка является уменьшенной копией другой, здесь указываются ее
    граничные размеры, которые были заказаны при уменьшении оригинала
    Если нет, то ставится null

unique (large_id, bound_width, bound_height, mime_type)

Операции
--------

Для хранилища определены следующие операции:

* Поместить файл в хранилище

Вычисляется SHA1-хэш файла и он перемещается в соответствующее место в файловой
системе, если там уже не находится такой же файл.
Создается запись в таблице картинок со следующими параметрами:
(
id,
ident = null,
hash = вычисленный хэш,
width = ширина картинки,
height = высота картинки,
mime_type = MIME-тип картинки,
size = объем картинки в байтах,
accessed = now(),
large_id = null,
bound_width = null,
bound_height = null
)

* Заказать уменьшенную копию картинки

Создается запись в таблице картинок со следующими параметрами (если такая
запись отсутствует):
(
id,
ident = null,
hash = null,
width = ширина картинки (вычисленная из оригинала),
height = высота картинки (вычисленная из оригинала),
mime_type = заказанный MIME-тип картинки,
size = null,
accessed = now(),
large_id = id оригинала,
bound_width = заказанная ширина,
bound_height = заказанная высота
)
Инициируется процесс создания уменьшенной картинки, если она отсутствует

* Создание уменьшенной копии картинки

В файловой системе находится оригинал и создается уменьшенная копия во
временном каталоге
Вычисляется SHA1-хэш уменьшенной копии и она помещается в соответствующее место
в файловой системе (если там уже нет такого же файла)
В соответствующей записи (запись ищется по композитному ключу
(large_id, bound_width, bound_height, mime_type)) в таблице проставляются
(hash, width, height, size)
Обновляется accessed

* Выдача картинки

Если указан ident картинки, по нему определяется id
По расширению картинки определяется mime_type
Если указаны размеры картинки, ищется запись в таблице с соответствующими
(large_id, bound_width, bound_height, mime_type)
Обновляется accessed
Из записи выбирается size и hash, файл с нужными заголовками выдается клиенту
Если hash = null, инициируется заново создание уменьшенной копии оригинальной
картинки

* Удаление картинки

Из таблицы удаляются все записи для картинки и ее уменьшенных копий

Сборка мусора
=============

Из файловой системы удаляются все файлы, на которые не осталось ссылок в поле
hash таблицы.

Экономия места на диске
=======================

Если на диске не хватает места, самые редко используемые уменьшенные копии
картинок можно удалить из файловой системы, проставив null в поле hash. Если
после этого картинка будет запрошена клиентом, уменьшенная копия будет создана
заново в момент запроса.

@(#) $Id$
